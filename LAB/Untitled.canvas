{
	"nodes":[
		{"id":"6f0233134783549c","type":"text","text":"# CN LAB","x":470,"y":-120,"width":160,"height":80,"color":"1"},
		{"id":"637115095c3f2186","type":"text","text":"# UDP-SERVER","x":-253,"y":1080,"width":335,"height":60,"color":"3"},
		{"id":"b2cb43a1c176c02e","type":"text","text":"# TCP-SERVER","x":1444,"y":1080,"width":316,"height":64,"color":"1"},
		{"id":"297a9dd97caaa9de","type":"text","text":"```C\nmain(int argc, char *argv[])\n{\n    int sid, sid1, rval;\n    time_t t = time(0);\n    struct sockaddr_in s, c;\n    char smsg[30];\n    strcpy(smsg, ctime(&t));\n    int clen;\n    system(\"clear\");\n     socket(AF_INET, SOCK_STREAM, 0);\n     \n   /*DEFINING NAME OF THE SERVICE*/\n    s.sin_family = AF_INET;\n    s.sin_addr.s_addr = inet_addr(argv[1]);\n    s.sin_port = htons(atoi(argv[2]));\n    /*BIND SOCKET- indicates the process that is listening*/\n    rval = bind(sid, (struct sockaddr *)&s, sizeof(s));\n   \n    rval = listen(sid, 5); // range : 1-5\n \n    clen = sizeof(c);\n    sid1 = accept(sid, (struct sockaddr *)&c, &clen);\n    strcpy(smsg, ctime(&t)); // const time_t* if error\n    rval = send(sid1, smsg, sizeof(smsg), 0);\n    if (rval == -1)\n    {\n        perror(\"MSG-SND-ERR:\");\n    }\n    else\n    {\n        printf(\"\\nResponse sent\\n\");\n    }\n    close(sid);\n    close(sid1);\n}\n```","x":1563,"y":1240,"width":696,"height":920,"color":"3"},
		{"id":"6d741883b2995024","type":"text","text":"```c\nmain(int argc, char *argv[])\n{\n    int sid, sid1, rval;\n    struct sockaddr_in s, c;\n    char buffer[20];\n    int clen;\n    system(\"clear\");\n  \n    sid = socket(AF_INET, SOCK_STREAM, 0);\n   \n    /*DEFINING NAME OF THE SERVICE*/\n    s.sin_family = AF_INET;\n    s.sin_addr.s_addr = inet_addr(argv[1]);\n    s.sin_port = htons(atoi(argv[2]));\n    /*BIND SOCKET- indicates the process that is listening*/\n    rval = bind(sid, (struct sockaddr *)&s, sizeof(s));\n   \n    rval = listen(sid, 5); // range : 1-5\n   \n    clen = sizeof(c);\n    sid1 = accept(sid, (struct sockaddr *)&c, &clen);\n    rval = recv(sid1, buffer, sizeof(buffer), 0);\n    if (rval == -1)\n    {\n        perror(\"MSG-RCV-ERR:\");\n    }\n    else\n    {\n        printf(\"\\nClient request is %s\\n\", buffer);\n    }\n    rval = send(sid1, buffer, sizeof(buffer), 0);\n    if (rval == -1)\n    {\n        perror(\"MSG-SND-ERR:\");\n    }\n    else\n    {\n        printf(\"\\nResponse sent\\n\");\n    }\n    close(sid);\n    close(sid1);\n}\n\n``` ","x":796,"y":1240,"width":719,"height":1120,"color":"4"},
		{"id":"bfc3eea8e2746d26","type":"text","text":"# TCP-CLIENT","x":1122,"y":71,"width":250,"height":60,"color":"3"},
		{"id":"9b8c87272763cc33","type":"text","text":"```c\nmain(int argc, char *argv[])\n{\n    unsigned long timeval, tempval;\n    int sockid, rval;\n    char m1[20], m2[20];\n    sockid = socket(AF_INET, SOCK_STREAM, 0);\n \n    struct sockaddr_in s;\n    system(\"clear\");\n    \n    s.sin_family = AF_INET;\n    s.sin_port = htons(atoi(argv[2]));\n    s.sin_addr.s_addr = inet_addr(argv[1]);\n    rval = connect(sockid, (struct sockaddr *)&s, sizeof(s));\n \n    printf(\"\\nEnter the request message : \");\n    scanf(\"%s\", m1);\n    rval = send(sockid, m1, sizeof(m1), 0);\n\n    printf(\"\\nMessage sent successfully\\n\");\n    rval = recv(sockid, &tempval, sizeof(tempval), 0);\n\n    timeval = htonl(tempval);\n    printf(\"\\nServer response is : %u\\n\", timeval);\n    close(sockid);\n}\n```","x":1327,"y":282,"width":551,"height":699,"color":"6"},
		{"id":"e0efe5b739652df2","type":"text","text":"```c\nmain(int argc, char *argv[])\n{\n    int sid, sid1, rval, itr, i, pid; // sid is half association. sid1 is full association\n    struct sockaddr_in s, c;\n    char buffer[20];\n    int clen; // accept() uses value-result parameter\n    system(\"clear\");\n  \n    printf(\"\\nEnter the number of clients to serve/ server iterations : \");\n    scanf(\"%d\", &itr);\n    sid = socket(AF_INET, SOCK_STREAM, 0);\n  \n    /*DEFINING NAME OF THE SERVICE*/\n    s.sin_family = AF_INET;\n    s.sin_addr.s_addr = inet_addr(argv[1]);\n    s.sin_port = htons(atoi(argv[2]));\n    /*BIND SOCKET- indicates the process that is listening*/\n    rval = bind(sid, (struct sockaddr *)&s, sizeof(s));\n    \n    rval = listen(sid, 5); // range : 1-5\n   \n    for (i = 1; i <= itr; i++)\n    {\n        clen = sizeof(c);\n        sid1 = accept(sid, (struct sockaddr *)&c, &clen);\n        if (sid1 == -1)\n        {\n            perror(\"ACCEPT-ERR:\");\n            close(sid);\n            exit(1);\n        }\n        pid = fork();\n        if (pid == -1)\n        {\n            perror(\"FRK-ERR:\");\n            close(sid1);\n            close(sid);\n            exit(1);\n        }\n        /*sid1 is a full association tuple and has information of client,server and communication\n        protocol i.e serving socket*/\n        if (pid == 0) // CHILD\n        {\n            rval = recv(sid1, buffer, sizeof(buffer), 0);\n            if (rval == -1)\n            {\n                perror(\"MSG-RCV-ERR:\");\n            }\n            else\n            {\n                printf(\"\\nClient request is %s\\n\", buffer);\n            }\n            rval = send(sid1, buffer, sizeof(buffer), 0);\n            if (rval == -1)\n            {\n                perror(\"MSG-SND-ERR:\");\n            }\n            else\n            {\n                printf(\"\\nResponse sent\\n\");\n            }\n            close(sid1); // closing the serving socket\n            exit(0);\n        }\n        else             // PARENT\n            close(sid1); /*parent also has a copy of the serving socket. So close it here.*/\n    }\n    close(sid); // closing the listening socket\n    exit(0);\n}\n\n```","x":82,"y":2498,"width":978,"height":1782,"color":"6"},
		{"id":"c761cf6c14760590","type":"text","text":"# Multiple-Clients (TCP)","x":-134,"y":2240,"width":431,"height":60,"color":"1"},
		{"id":"3a333a0649a95690","type":"text","text":"```c\nmain(int argc, char *argv[])\n{\n    struct sockaddr_in s;\n    int sockid, rval;\n    char m1[20], m2[20];\n    sockid = socket(AF_INET, SOCK_STREAM, 0);\n   \n    system(\"clear\");\n   \n    s.sin_family = AF_INET;\n    s.sin_addr.s_addr = inet_addr(argv[1]);\n    s.sin_port = htons(atoi(argv[2]));\n    rval = connect(sockid, (struct sockaddr *)&s, sizeof(s));\n    \n    printf(\"\\nEnter the request message : \");\n    scanf(\"%s\", m1);\n    \n    rval = send(sockid, m1, sizeof(m1), 0);\n    printf(\"\\nMessage sent successfully\\n\");\n    \n    rval = recv(sockid, m2, sizeof(m2), 0);\n    printf(\"\\nServer response is : %s\\n\", m2);\n    close(sockid);\n}\n```","x":620,"y":297,"width":707,"height":669,"color":"3"},
		{"id":"e654409fd183a3fc","type":"text","text":"```C\nmain(int argc, char * argv[])\n{\n\tstruct sockaddr_in s;\n\tint rval,sockid,slen;\n\tchar m1[20],m2[20];\n\t\n\tsystem(\"clear\");\n\t\n\tsockid=socket(AF_INET,SOCK_DGRAM,0);\n\t\n\ts.sin_family=AF_INET;\n\ts.sin_addr.s_addr=inet_addr(argv[1]);\n\ts.sin_port=htons(atoi(argv[2]));\n\t\n\tprintf(\"\\n \tENTER THE REQUEST MESSAGE ::\");\n\tscanf(\"%s\",m1);\n\t\n\tslen=sizeof(s);\n\t\n\trval=sendto(sockid,m1,sizeof(m1),0,(struct sockaddr *)&s,slen);\n\tprintf(\"\\n message sent sucessfully \\n\");\n\t\n\tstrncpy(m2,\" \",20);\n\trval=recvfrom(sockid,m2,sizeof(m2),0,(struct sockaddr *)&s,&slen);\n\tprintf(\"\\n message received is %s \\n\",m2);\n\t\n\tclose(sockid);\n}\n```\n","x":-1213,"y":297,"width":820,"height":738,"color":"4"},
		{"id":"f2826f9ea4c61440","type":"text","text":"```C\nmain(int argc, char * argv[])\n{\n\tunsigned long timeval,tempval;\n\tstruct sockaddr_in s;\n\tint rval,sockid,slen;\n\tchar m1[20],m2[100];\n\t\n\tsystem(\"clear\");\n\n\tsockid = socket(AF_INET, SOCK_DGRAM,0);\n\t\n\ts.sin_family= AF_INET;\n\ts.sin_addr.s_addr = inet_addr(argv[1]);\n\ts.sin_port = htons(atoi(argv[2]));\n\tprintf(\"\\nSocket created\");\n\t\n\tslen = sizeof(s);\n\trval = sendto(sockid,m1,sizeof(m1),0,(struct sockaddr *)&s,slen);\n\n\tprintf(\"\\nMessage sent successfully\\n\");\n\trval = recvfrom(sockid,&tempval,sizeof(tempval),0, (struct sockaddr *)&s,&slen);\n\t\n\ttimeval = htonl(tempval);\n\tprintf(\"\\nMessage received is :%u\\n\",timeval);\n\t\n\tclose(sockid);\n}\n```","x":-363,"y":313,"width":923,"height":706,"color":"5"},
		{"id":"33bae8f0609bf7b6","type":"text","text":"# UDP-CLIENT","x":-393,"y":111,"width":362,"height":50,"color":"1"},
		{"id":"a4fdb2c9e7f329f9","type":"text","text":"```c\nmain(int argc, char *argv[])\n{\n    int sid, sid1, rval, itr, i; // sid is half association. sid1 is full association\n    struct sockaddr_in s, c;\n    char buffer[20];\n    int clen; // accept() uses value-result parameter\n    system(\"clear\");\n    \n        printf(\"\\nEnter the number of clients to serve/ server iterations : \");\n    scanf(\"%d\", &itr);\n    sid = socket(AF_INET, SOCK_STREAM, 0);\n   \n    /*DEFINING NAME OF THE SERVICE*/\n    s.sin_family = AF_INET;\n    s.sin_addr.s_addr = inet_addr(argv[1]);\n    s.sin_port = htons(atoi(argv[2]));\n    \n    /*BIND SOCKET- indicates the process that is listening*/\n    rval = bind(sid, (struct sockaddr *)&s, sizeof(s));\n\n    rval = listen(sid, 5); // range : 1-5\n  \n    for (i = 1; i <= itr; i++)\n    {\n        clen = sizeof(c);\n        sid1 = accept(sid, (struct sockaddr *)&c, &clen);\n        /*sid1 is a full association tuple and has information of client,server and communication\n        protocol i.e serving socket*/\n        rval = recv(sid1, buffer, sizeof(buffer), 0);\n        if (rval == -1)\n        {\n            perror(\"MSG-RCV-ERR:\");\n        }\n        else\n        {\n            printf(\"\\nClient request is %s\\n\", buffer);\n        }\n        rval = send(sid1, buffer, sizeof(buffer), 0);\n        if (rval == -1)\n        {\n            perror(\"MSG-SND-ERR:\");\n        }\n        else\n        {\n            printf(\"\\nResponse sent\\n\");\n        }\n        close(sid1); // closing the serving socket\n    }\n    close(sid); // closing the listening socket\n}\n```\n","x":-972,"y":2498,"width":1054,"height":1280,"color":"4"},
		{"id":"d286f502e62d8f33","type":"text","text":"```c\nmain(int argc,char * argv[])\n{\n\tint sockid,rval,clen;\n\tchar buffer[20];\n\tstruct sockaddr_in s,c;\n\t\n\tsockid = socket(AF_INET,SOCK_DGRAM,0);\n\t\n\ts.sin_family = AF_INET;\n\ts.sin_addr.s_addr = inet_addr(argv[1]);\n\ts.sin_port = htons(atoi(argv[2]));\n\tprintf(\"socket created\\n\");\n\trval = bind(sockid,(struct sockaddr *)&s,sizeof(s));\n\tprintf(\"socket binded\\n\");\n\t\n\tclen = sizeof(c);\n\trval = recvfrom(sockid,buffer,sizeof(buffer),0,(struct sockaddr *)&c,&clen);\n\t\n\tprintf(\"\\nRequest received\\nRequest message is :%s\\n\",buffer);\n\tstrcat(buffer,\" Quadeer\");\n\trval = sendto(sockid,buffer,sizeof(buffer),0,(struct sockaddr *)&c,clen);\n\t\n\tprintf(\"\\nResponse sent successfully\\n\");\n\tclose(sockid);\n}\n``` ","x":-1040,"y":1280,"width":861,"height":680,"color":"6"},
		{"id":"05a1383a7897e4db","type":"text","text":"```C\nmain(int argc, char *argv[])\n{\n\tint sockid, rval, clen;\n\tchar buffer[20], smsg[30];\n\ttime_t t;\n\tstruct sockaddr_in s,c;\n\t\n\tsockid = socket(AF_INET,SOCK_DGRAM,0);\n\t\n\ts.sin_family = AF_INET;\n\ts.sin_addr.s_addr = inet_addr(argv[1]);\n\ts.sin_port = htons(atoi(argv[2]));\n\trval = bind(sockid,(struct sockaddr *)&s,sizeof(s));\n\t\n\tclen = sizeof(c);\n\trval = recvfrom(sockid,buffer,sizeof(buffer),0,(struct sockaddr *)&c,&clen);\n\t\n\tprintf(\"\\nRequest received \\nRequest message is :%s\\n\",buffer);\n\tt = time(0);\n\tstrcpy(smsg,ctime(&t));\n\trval = sendto(sockid,smsg,sizeof(smsg),0,(struct sockaddr*)&c,sizeof(c));\n\t\n\tprintf(\"\\nResponse sent successfully\\n\");\n\tclose(sockid);\n}\n```","x":-179,"y":1280,"width":874,"height":676,"color":"5"}
	],
	"edges":[
		{"id":"92191770d98c8e39","fromNode":"6f0233134783549c","fromSide":"bottom","toNode":"33bae8f0609bf7b6","toSide":"top","color":"3"},
		{"id":"69671d29cd1483bd","fromNode":"33bae8f0609bf7b6","fromSide":"bottom","toNode":"e654409fd183a3fc","toSide":"top","label":"0"},
		{"id":"1053bf1ab95c358c","fromNode":"33bae8f0609bf7b6","fromSide":"bottom","toNode":"f2826f9ea4c61440","toSide":"top","label":"Time-service"},
		{"id":"42e17b09b2f70939","fromNode":"bfc3eea8e2746d26","fromSide":"bottom","toNode":"3a333a0649a95690","toSide":"top","label":"0"},
		{"id":"cb566c21180d6ee4","fromNode":"bfc3eea8e2746d26","fromSide":"bottom","toNode":"9b8c87272763cc33","toSide":"top","label":"Time-service"},
		{"id":"62ef6b27c0c071d6","fromNode":"6f0233134783549c","fromSide":"bottom","toNode":"bfc3eea8e2746d26","toSide":"top","color":"1"},
		{"id":"a831e1eab42ba033","fromNode":"637115095c3f2186","fromSide":"bottom","toNode":"d286f502e62d8f33","toSide":"top","color":"3","label":"0"},
		{"id":"7fd3bde344b69cd8","fromNode":"637115095c3f2186","fromSide":"bottom","toNode":"05a1383a7897e4db","toSide":"top","color":"2","label":"DTS"},
		{"id":"ec89956558970d13","fromNode":"b2cb43a1c176c02e","fromSide":"bottom","toNode":"6d741883b2995024","toSide":"top","color":"6","label":"0"},
		{"id":"20512ae1762eb062","fromNode":"b2cb43a1c176c02e","fromSide":"bottom","toNode":"297a9dd97caaa9de","toSide":"top","color":"2","label":"DTS"},
		{"id":"6ea0ae62f0776e77","fromNode":"c761cf6c14760590","fromSide":"bottom","toNode":"a4fdb2c9e7f329f9","toSide":"top","fromEnd":"arrow","color":"2","label":"ITR"},
		{"id":"a6a255d0afec213f","fromNode":"c761cf6c14760590","fromSide":"bottom","toNode":"e0efe5b739652df2","toSide":"top","color":"3","label":"conc"}
	]
}